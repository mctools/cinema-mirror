#!/usr/bin/env python3

from Cinema.Prompt import Launcher, Visualiser
import matplotlib.pyplot as plt
import numpy as np
import argparse
from Cinema.Interface.Utils import findData
import os

parser = argparse.ArgumentParser()
parser.add_argument('-g', '--gdml', action='store', type=str, default='',
                    dest='gdml', help='input gdml file')
parser.add_argument('-v', '--visualize', action='store_true', dest='visualize', help='flag to visualize gdml model')
parser.add_argument('-s', '--seed', action='store', type=int, default=4096,
                    dest='seed', help='random seed number')
parser.add_argument('-n', '--neutronNum', action='store', type=float, default=100,
                    dest='neutronNum', help='neutron number')
parser.add_argument('-b', '--blacklist',  type=str, nargs='+', dest='blacklist', help='solid mesh blacklist to inform the geometry mesh loader ')

#TODO:
# parser.add_argument('-l', '--geoLayer', action='store', type=float, default=0,
#                     dest='geoLayer', help='geometry tree layers to be shown')
#
# parser.add_argument('-n', '--neutronNum', action='store', type=float, default=100,
#                     dest='num', help='maxium number of verts to represent a volume')
#
# parser.add_argument('-n', '--neutronNum', action='store', type=float, default=100,
#                     dest='neutronNum', help='emforce all defined physical volume to be placed into the world')

# parser.add_argument('-n', '--neutronNum', action='store', type=float, default=100,
#                     dest='neutronNum', help='print trajectores in the terminal')


args=parser.parse_args()
inputfile=args.gdml
printTraj=False

if not os.path.isfile(inputfile):
    inputfile=findData(f'gdml/{inputfile}', '.')
    if not os.path.isfile(inputfile):
        raise IOError(f'The input GDML file {args.gdml} is not found.')

rdseed=args.seed

myLcher=Launcher()
myLcher.setSeed(rdseed)
myLcher.loadGeometry(inputfile)

if args.visualize is True:
    v = Visualiser(args.blacklist, printWorld=True)
    for i in range(int(args.neutronNum)):
        myLcher.go(1, recordTrj=True)
        if printTraj:
           print(f'trajectory size {myLcher.getTrajSize()}')
        trj = myLcher.getTrajectory()
        try:
            v.addLine(trj)
        except ValueError:
            print("skip ValueError in File '/Prompt/scripts/promptpy', in <module>, v.addLine(trj)")
        if printTraj:
            print(trj)
    v.show()
else:
    myLcher.go(int(args.neutronNum), recordTrj=False)
