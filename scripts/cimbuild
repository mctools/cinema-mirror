#!/usr/bin/env python3
import os
import argparse
import subprocess

def run_command(command):
    try:
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running command: {command}. Error: {e}")
        exit(1)

def main():
    parser = argparse.ArgumentParser(description="Build and test cinema.")
    parser.add_argument('-t', action='store_const', const='test', dest='testflag', help='Run tests.')
    build_group = parser.add_mutually_exclusive_group()
    build_group.add_argument('-d', action='store_const', const='Debug', dest='buildtype', help='Build in debug mode.')
    build_group.add_argument('-r', action='store_const', const='Release', dest='buildtype', help='Build in release mode.')
    parser.add_argument('-c', action='store_const', const='clean', dest='cleanflag', help='Clean the build.')
    parser.add_argument('--enablegidi', action='store_true', help='Enable GIDI in CMake. (Default: False)')
    parser.add_argument('--enablecatima', action='store_true', help='Enable CATIMA in CMake. (Default: False)')
    parser.add_argument('--deugpts', action='store_true', help='Enable DEBUG_PTS in CMake. (Default: False)')

    args = parser.parse_args()

    cinema_path = os.environ.get('CINEMAPATH')
    if not cinema_path:
        print("Error: CINEMAPATH environment variable is not set.")
        exit(1)

    build_dir = os.path.join(cinema_path, 'cinemabin')
    os.chdir(build_dir)

    if args.cleanflag == 'clean':
        print("Cleaning the build directory")
        run_command('make clean')

    cmake_args = []
    if args.enablegidi:
        cmake_args.append('-DENABLE_GIDI=ON')
    else:
        cmake_args.append('-DENABLE_GIDI=OFF')
    if args.enablecatima:
        cmake_args.append('-DENABLE_CATIMA=ON')
    else:
        cmake_args.append('-DENABLE_CATIMA=OFF')
    if args.deugpts:
        cmake_args.append('-DDEBUG_PTS=ON')
    else:
        cmake_args.append('-DDEBUG_PTS=OFF')

    if args.buildtype:
        cmake_args.extend([f'-DCMAKE_BUILD_TYPE={args.buildtype}', '-DCMAKE_CXX_FLAGS_DEBUG="-g -O0"', '-DCMAKE_C_FLAGS_DEBUG="-g -O0"'])

    cmake_args.append('..')

    run_command(f'cmake {" ".join(cmake_args)}')

    run_command('make -j')

    if args.testflag == 'test':
        cpu_count = os.cpu_count()
        if cpu_count is None:
            test_cpu_count = 1
        else:
            test_cpu_count = cpu_count // 2
        print(f"Running tests with {test_cpu_count} CPUs")
        run_command(f'ctest -j{test_cpu_count}')
    else:
        print("Skipped unittest")

    os.chdir('..')

if __name__ == '__main__':
    main()