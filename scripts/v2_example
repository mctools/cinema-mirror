#!/usr/bin/env python3

from Cinema.Prompt import Prompt, PromptMPI
from Cinema.Prompt.geo import Volume, Transformation3D
from Cinema.Prompt.solid import Box, Sphere, Tube, Trapezoid
from Cinema.Prompt.gun import PythonGun
import numpy as np

from Cinema.Prompt import Prompt
from Cinema.Prompt.geo import Volume
from Cinema.Prompt.solid import Box, Sphere

class MySim(Prompt):
    def __init__(self, seed) -> None:
        super().__init__(seed)

    def makeWorld(self, par : dict):
        x=par.get('x')
        y=par.get('y')
        z=par.get('z')
        self.setGun(f'gun=SimpleThermalGun;position={x}, {y}, {z}')

        world = Volume('world', Box(8, 8, 8))
        sp = Volume('sphere', Sphere(rmin=0, rmax=5), 'Al_sg225.ncmat')
        box  = Volume('box', Box(2,2,2), 'V_sg229.ncmat')

        self.scorer['psd'] = """Scorer=PSD;name=apsd;xmin=-10.;
                                 xmax=10.;numbin_x=50;ymin=-10.;
                                 ymax=10.;numbin_y=50.;ptstate=SURFACE;"""
        
        self.scorer['wl'] = """Scorer=WlSpectrum; name=wl; 
                               min=0.0; max=8; numbin=100; ptstate=SURFACE"""


        det = Volume('thinbox', Box(5, 5,1e-3))
        det.addScorer(self.scorer['psd'] )
        det.addScorer(self.scorer['wl'] )
        world.placeChild('psd', det, Transformation3D(0., 0., 7),)

        trs = Transformation3D(0,0,0,0,0)
        rotated = np.array([[1,1,1],[0,1,0]])
        original =  np.array([[0,0,1], [1,1,1]])
        trs.setRotByAlignement(rotated, original)

        sp.placeChild('box', box, trs)        
        world.placeChild('sp', sp)
        self.setWorld(world)



sim = MySim(seed=4096)


# p={}
# p['x']=0
# p['y']=0
# p['z']=-6
# sim.makeWorld(p)
# # sim.show(num=100)

# sim.simulate(1e4)

# pdfhist = sim.getScorerHist('psd')
# pdfhist.plot()

# wlhist = sim.getScorerHist('wl')
# wlhist.plot(show=True)


from Cinema.Prompt import Optimiser
class PosOpt(Optimiser):
    def __init__(self, sim):
        super().__init__(sim, 1e5, ['minimize'])
        self.addParameter('x', lower = -5, upper = 5)
        self.addParameter('y', lower = -5, upper = 5)
        self.addParameter('z', lower = -5, upper = 5)

    def objective(self, trial):
        p = self.getParameters(trial)    
        c = -(p['x']**2+p['y']**2+p['z']**2 - 25)
        trial.set_user_attr('constraint', (c))

        if c < 0: # allowed space
            self.sim.clear()             
            self.sim.makeWorld(p)
            self.sim.simulate(self.trailNeutronNum)
            hist = self.sim.getScorerHist('wl')      
            return hist.getWeight().sum()
        else:
            return self.trailNeutronNum


opt = PosOpt(sim)
# opt.visInitialGeometry()
opt.optimize(name = 'pos_opt', n_trials = 1000, localhost=True)
print(opt.study.best_params, opt.study.best_value)
opt.analysis()

