#!/usr/bin/env python3

from  Cinema.Prompt.compoundModel import ModelCollection
import numpy as np
import matplotlib.pyplot as plt
import argparse
from Cinema.Interface import plotStyle
from Cinema.Prompt.centralData import CentralData 
from Cinema.Prompt.utils import nccalNumDensity

try:
    import openmc
    openmcfound = True
except ModuleNotFoundError:
    print('OpenMC is not found')
    openmcfound = False



plotStyle()

parser = argparse.ArgumentParser()

parser.add_argument('cfg', metavar='N', type=str, nargs='+', help='Prompt materil config')

parser.add_argument('-c', '--switchingenergy', action='store',  nargs='+', type=float, default=[-5],
                    dest='switchingenergy', help='model switching energy')

parser.add_argument('-x', '--crosscomp', action='store_true', dest='crosscomp', help='cross comparison')
parser.add_argument('-p', '--pdg', action='store',  type=int, default=2112,
                    dest='pdg', help='pdg number')


cdata=CentralData()
cdata.setEnableGidi(True)

args=parser.parse_args()
print(args.switchingenergy)



ekin = np.logspace(np.log10(20e6), -5, 100000)

for cfg in args.cfg:
    if openmcfound and args.crosscomp:
        m1 = openmc.Material.from_ncrystal(cfg)
        m1.name = cfg
        fig = openmc.plot_xs({m1:['total']})
    
    numberdensity = nccalNumDensity(cfg)
    print('number density', )    

    for sen in args.switchingenergy:
        cdata.setGidiThreshold(sen)
        comp = ModelCollection(cfg)
        xs = np.zeros_like(ekin)
        for i in range(ekin.size):
            xs[i] = comp.xs(ekin[i], args.pdg)        
        macroxs = numberdensity*xs*1e-21
        plt.loglog(ekin, macroxs, label=cfg+', switching@'+str(sen))

plt.legend(loc=0)
plt.grid('both')
plt.show()