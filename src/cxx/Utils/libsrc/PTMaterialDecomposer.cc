////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  This file is part of Prompt (see https://gitlab.com/xxcai1/Prompt)        //
//                                                                            //
//  Copyright 2021-2024 Prompt developers                                     //
//                                                                            //
//  Licensed under the Apache License, Version 2.0 (the "License");           //
//  you may not use this file except in compliance with the License.          //
//  You may obtain a copy of the License at                                   //
//                                                                            //
//      http://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                            //
//  Unless required by applicable law or agreed to in writing, software       //
//  distributed under the License is distributed on an "AS IS" BASIS,         //
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//  See the License for the specific language governing permissions and       //
//  limitations under the License.                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
#include "PTMaterialDecomposer.hh"
#include "NCrystal/NCrystal.hh"

// m_comp is generated by the python script as followed
// import periodictable as pt
// # pt.__version__ '1.6.1'
// code =  "{ "
// # {"B", {{10,10,1,"B10"}, {10,10,1,"B11"}} },  {"C", {{10,10,1,"B10"}} } };
// for ele in pt.elements:
//     Alist = ele.isotopes
//     substr = ""
//     Z = ele.number
//     substr += f' {{ {Z}, {{'
//     total = 0;   
//     for A in Alist:
//         abundance = ele[A].abundance
//         total += abundance
//         if abundance != 0.:
//             substr += '{'
//             substr += f'{Z}, {A}, {abundance*0.01}, "{ele.symbol}{A}"'
//             substr += '},'
//     substr += '} '    
//     substr += "}, \n"
//     if total>99.9:
//         code += substr
// code += "}"
// print(code)

Prompt::MaterialDecomposer::MaterialDecomposer()
:m_natcomp({  { 0, {{0, 1, 1.0, "n1"},} }, 
 { 1, {{1, 1, 0.999885, "H1"},{1, 2, 0.000115, "H2"},} }, 
 { 2, {{2, 3, 1.37e-06, "He3"},{2, 4, 0.9999986300000001, "He4"},} }, 
 { 3, {{3, 6, 0.0759, "Li6"},{3, 7, 0.9241, "Li7"},} }, 
 { 4, {{4, 9, 1.0, "Be9"},} }, 
 { 5, {{5, 10, 0.19899999999999998, "B10"},{5, 11, 0.8009999999999999, "B11"},} }, 
 { 6, {{6, 12, 0.9893000000000001, "C12"},{6, 13, 0.010700000000000001, "C13"},} }, 
 { 7, {{7, 14, 0.9963200000000001, "N14"},{7, 15, 0.00368, "N15"},} }, 
 { 8, {{8, 16, 0.9975700000000001, "O16"},{8, 17, 0.00038, "O17"},{8, 18, 0.0020499999999999997, "O18"},} }, 
 { 9, {{9, 19, 1.0, "F19"},} }, 
 { 10, {{10, 20, 0.9048, "Ne20"},{10, 21, 0.0027, "Ne21"},{10, 22, 0.0925, "Ne22"},} }, 
 { 11, {{11, 23, 1.0, "Na23"},} }, 
 { 12, {{12, 24, 0.7898999999999999, "Mg24"},{12, 25, 0.1, "Mg25"},{12, 26, 0.1101, "Mg26"},} }, 
 { 13, {{13, 27, 1.0, "Al27"},} }, 
 { 14, {{14, 28, 0.9222969999999999, "Si28"},{14, 29, 0.046832000000000006, "Si29"},{14, 30, 0.030872000000000004, "Si30"},} }, 
 { 15, {{15, 31, 1.0, "P31"},} }, 
 { 16, {{16, 32, 0.9493, "S32"},{16, 33, 0.0076, "S33"},{16, 34, 0.0429, "S34"},{16, 36, 0.0002, "S36"},} }, 
 { 17, {{17, 35, 0.7578, "Cl35"},{17, 37, 0.2422, "Cl37"},} }, 
 { 18, {{18, 36, 0.0033650000000000004, "Ar36"},{18, 38, 0.0006320000000000001, "Ar38"},{18, 40, 0.9960030000000001, "Ar40"},} }, 
 { 19, {{19, 39, 0.932581, "K39"},{19, 40, 0.00011700000000000001, "K40"},{19, 41, 0.067302, "K41"},} }, 
 { 20, {{20, 40, 0.96941, "Ca40"},{20, 42, 0.00647, "Ca42"},{20, 43, 0.00135, "Ca43"},{20, 44, 0.02086, "Ca44"},{20, 46, 4e-05, "Ca46"},{20, 48, 0.0018700000000000001, "Ca48"},} }, 
 { 21, {{21, 45, 1.0, "Sc45"},} }, 
 { 22, {{22, 46, 0.0825, "Ti46"},{22, 47, 0.07440000000000001, "Ti47"},{22, 48, 0.7372, "Ti48"},{22, 49, 0.0541, "Ti49"},{22, 50, 0.0518, "Ti50"},} }, 
 { 23, {{23, 50, 0.0025, "V50"},{23, 51, 0.9975, "V51"},} }, 
 { 24, {{24, 50, 0.043449999999999996, "Cr50"},{24, 52, 0.83789, "Cr52"},{24, 53, 0.09501, "Cr53"},{24, 54, 0.023650000000000004, "Cr54"},} }, 
 { 25, {{25, 55, 1.0, "Mn55"},} }, 
 { 26, {{26, 54, 0.05845, "Fe54"},{26, 56, 0.91754, "Fe56"},{26, 57, 0.021190000000000004, "Fe57"},{26, 58, 0.0028199999999999996, "Fe58"},} }, 
 { 27, {{27, 59, 1.0, "Co59"},} }, 
 { 28, {{28, 58, 0.680769, "Ni58"},{28, 60, 0.262231, "Ni60"},{28, 61, 0.011399, "Ni61"},{28, 62, 0.036345, "Ni62"},{28, 64, 0.009256, "Ni64"},} }, 
 { 29, {{29, 63, 0.6917, "Cu63"},{29, 65, 0.30829999999999996, "Cu65"},} }, 
 { 30, {{30, 64, 0.4863, "Zn64"},{30, 66, 0.27899999999999997, "Zn66"},{30, 67, 0.040999999999999995, "Zn67"},{30, 68, 0.1875, "Zn68"},{30, 70, 0.0062, "Zn70"},} }, 
 { 31, {{31, 69, 0.60108, "Ga69"},{31, 71, 0.39892000000000005, "Ga71"},} }, 
 { 32, {{32, 70, 0.2084, "Ge70"},{32, 72, 0.2754, "Ge72"},{32, 73, 0.07730000000000001, "Ge73"},{32, 74, 0.3628, "Ge74"},{32, 76, 0.0761, "Ge76"},} }, 
 { 33, {{33, 75, 1.0, "As75"},} }, 
 { 34, {{34, 74, 0.0089, "Se74"},{34, 76, 0.09369999999999999, "Se76"},{34, 77, 0.0763, "Se77"},{34, 78, 0.2377, "Se78"},{34, 80, 0.4961, "Se80"},{34, 82, 0.0873, "Se82"},} }, 
 { 35, {{35, 79, 0.5069, "Br79"},{35, 81, 0.49310000000000004, "Br81"},} }, 
 { 36, {{36, 78, 0.0034999999999999996, "Kr78"},{36, 80, 0.022799999999999997, "Kr80"},{36, 82, 0.1158, "Kr82"},{36, 83, 0.1149, "Kr83"},{36, 84, 0.5700000000000001, "Kr84"},{36, 86, 0.17300000000000001, "Kr86"},} }, 
 { 37, {{37, 85, 0.7217, "Rb85"},{37, 87, 0.2783, "Rb87"},} }, 
 { 38, {{38, 84, 0.005600000000000001, "Sr84"},{38, 86, 0.0986, "Sr86"},{38, 87, 0.07, "Sr87"},{38, 88, 0.8258, "Sr88"},} }, 
 { 39, {{39, 89, 1.0, "Y89"},} }, 
 { 40, {{40, 90, 0.5145000000000001, "Zr90"},{40, 91, 0.11220000000000001, "Zr91"},{40, 92, 0.17149999999999999, "Zr92"},{40, 94, 0.17379999999999998, "Zr94"},{40, 96, 0.027999999999999997, "Zr96"},} }, 
 { 41, {{41, 93, 1.0, "Nb93"},} }, 
 { 42, {{42, 92, 0.1484, "Mo92"},{42, 94, 0.0925, "Mo94"},{42, 95, 0.1592, "Mo95"},{42, 96, 0.1668, "Mo96"},{42, 97, 0.09550000000000002, "Mo97"},{42, 98, 0.2413, "Mo98"},{42, 100, 0.09630000000000001, "Mo100"},} }, 
 { 44, {{44, 96, 0.055400000000000005, "Ru96"},{44, 98, 0.0187, "Ru98"},{44, 99, 0.1276, "Ru99"},{44, 100, 0.126, "Ru100"},{44, 101, 0.1706, "Ru101"},{44, 102, 0.3155, "Ru102"},{44, 104, 0.1862, "Ru104"},} }, 
 { 45, {{45, 103, 1.0, "Rh103"},} }, 
 { 46, {{46, 102, 0.0102, "Pd102"},{46, 104, 0.11140000000000001, "Pd104"},{46, 105, 0.2233, "Pd105"},{46, 106, 0.2733, "Pd106"},{46, 108, 0.2646, "Pd108"},{46, 110, 0.11720000000000001, "Pd110"},} }, 
 { 47, {{47, 107, 0.51839, "Ag107"},{47, 109, 0.48161000000000004, "Ag109"},} }, 
 { 48, {{48, 106, 0.0125, "Cd106"},{48, 108, 0.0089, "Cd108"},{48, 110, 0.12490000000000001, "Cd110"},{48, 111, 0.128, "Cd111"},{48, 112, 0.2413, "Cd112"},{48, 113, 0.1222, "Cd113"},{48, 114, 0.2873, "Cd114"},{48, 116, 0.07490000000000001, "Cd116"},} }, 
 { 49, {{49, 113, 0.0429, "In113"},{49, 115, 0.9571, "In115"},} }, 
 { 50, {{50, 112, 0.0097, "Sn112"},{50, 114, 0.006600000000000001, "Sn114"},{50, 115, 0.0034000000000000002, "Sn115"},{50, 116, 0.1454, "Sn116"},{50, 117, 0.0768, "Sn117"},{50, 118, 0.2422, "Sn118"},{50, 119, 0.0859, "Sn119"},{50, 120, 0.3258, "Sn120"},{50, 122, 0.0463, "Sn122"},{50, 124, 0.0579, "Sn124"},} }, 
 { 51, {{51, 121, 0.5721, "Sb121"},{51, 123, 0.4279, "Sb123"},} }, 
 { 52, {{52, 120, 0.0009, "Te120"},{52, 122, 0.0255, "Te122"},{52, 123, 0.0089, "Te123"},{52, 124, 0.047400000000000005, "Te124"},{52, 125, 0.0707, "Te125"},{52, 126, 0.1884, "Te126"},{52, 128, 0.3174, "Te128"},{52, 130, 0.3408, "Te130"},} }, 
 { 53, {{53, 127, 1.0, "I127"},} }, 
 { 54, {{54, 124, 0.0009, "Xe124"},{54, 126, 0.0009, "Xe126"},{54, 128, 0.0192, "Xe128"},{54, 129, 0.2644, "Xe129"},{54, 130, 0.0408, "Xe130"},{54, 131, 0.2118, "Xe131"},{54, 132, 0.26890000000000003, "Xe132"},{54, 134, 0.10439999999999999, "Xe134"},{54, 136, 0.08869999999999999, "Xe136"},} }, 
 { 55, {{55, 133, 1.0, "Cs133"},} }, 
 { 56, {{56, 130, 0.00106, "Ba130"},{56, 132, 0.00101, "Ba132"},{56, 134, 0.024169999999999997, "Ba134"},{56, 135, 0.06591999999999999, "Ba135"},{56, 136, 0.07854, "Ba136"},{56, 137, 0.11231999999999999, "Ba137"},{56, 138, 0.71698, "Ba138"},} }, 
 { 57, {{57, 138, 0.0009, "La138"},{57, 139, 0.9991, "La139"},} }, 
 { 58, {{58, 136, 0.00185, "Ce136"},{58, 138, 0.00251, "Ce138"},{58, 140, 0.8845000000000001, "Ce140"},{58, 142, 0.11114000000000002, "Ce142"},} }, 
 { 59, {{59, 141, 1.0, "Pr141"},} }, 
 { 60, {{60, 142, 0.272, "Nd142"},{60, 143, 0.122, "Nd143"},{60, 144, 0.23800000000000002, "Nd144"},{60, 145, 0.083, "Nd145"},{60, 146, 0.172, "Nd146"},{60, 148, 0.057, "Nd148"},{60, 150, 0.055999999999999994, "Nd150"},} }, 
 { 62, {{62, 144, 0.030699999999999998, "Sm144"},{62, 147, 0.1499, "Sm147"},{62, 148, 0.1124, "Sm148"},{62, 149, 0.13820000000000002, "Sm149"},{62, 150, 0.0738, "Sm150"},{62, 152, 0.2675, "Sm152"},{62, 154, 0.2275, "Sm154"},} }, 
 { 63, {{63, 151, 0.4781, "Eu151"},{63, 153, 0.5219, "Eu153"},} }, 
 { 64, {{64, 152, 0.002, "Gd152"},{64, 154, 0.021800000000000003, "Gd154"},{64, 155, 0.14800000000000002, "Gd155"},{64, 156, 0.2047, "Gd156"},{64, 157, 0.1565, "Gd157"},{64, 158, 0.2484, "Gd158"},{64, 160, 0.2186, "Gd160"},} }, 
 { 65, {{65, 159, 1.0, "Tb159"},} }, 
 { 66, {{66, 156, 0.0006, "Dy156"},{66, 158, 0.001, "Dy158"},{66, 160, 0.0234, "Dy160"},{66, 161, 0.18910000000000002, "Dy161"},{66, 162, 0.2551, "Dy162"},{66, 163, 0.249, "Dy163"},{66, 164, 0.2818, "Dy164"},} }, 
 { 67, {{67, 165, 1.0, "Ho165"},} }, 
 { 68, {{68, 162, 0.0014000000000000002, "Er162"},{68, 164, 0.0161, "Er164"},{68, 166, 0.3361, "Er166"},{68, 167, 0.2293, "Er167"},{68, 168, 0.26780000000000004, "Er168"},{68, 170, 0.1493, "Er170"},} }, 
 { 69, {{69, 169, 1.0, "Tm169"},} }, 
 { 70, {{70, 168, 0.0013000000000000002, "Yb168"},{70, 170, 0.0304, "Yb170"},{70, 171, 0.1428, "Yb171"},{70, 172, 0.2183, "Yb172"},{70, 173, 0.1613, "Yb173"},{70, 174, 0.31829999999999997, "Yb174"},{70, 176, 0.1276, "Yb176"},} }, 
 { 71, {{71, 175, 0.9741, "Lu175"},{71, 176, 0.0259, "Lu176"},} }, 
 { 72, {{72, 174, 0.0016, "Hf174"},{72, 176, 0.0526, "Hf176"},{72, 177, 0.18600000000000003, "Hf177"},{72, 178, 0.27280000000000004, "Hf178"},{72, 179, 0.1362, "Hf179"},{72, 180, 0.3508, "Hf180"},} }, 
 { 73, {{73, 180, 0.00012, "Ta180"},{73, 181, 0.99988, "Ta181"},} }, 
 { 74, {{74, 180, 0.0012, "W180"},{74, 182, 0.265, "W182"},{74, 183, 0.1431, "W183"},{74, 184, 0.3064, "W184"},{74, 186, 0.2843, "W186"},} }, 
 { 75, {{75, 185, 0.374, "Re185"},{75, 187, 0.626, "Re187"},} }, 
 { 76, {{76, 184, 0.0002, "Os184"},{76, 186, 0.0159, "Os186"},{76, 187, 0.0196, "Os187"},{76, 188, 0.13240000000000002, "Os188"},{76, 189, 0.16149999999999998, "Os189"},{76, 190, 0.2626, "Os190"},{76, 192, 0.4078, "Os192"},} }, 
 { 77, {{77, 191, 0.373, "Ir191"},{77, 193, 0.627, "Ir193"},} }, 
 { 78, {{78, 190, 0.00014000000000000001, "Pt190"},{78, 192, 0.00782, "Pt192"},{78, 194, 0.32967, "Pt194"},{78, 195, 0.33832, "Pt195"},{78, 196, 0.25242000000000003, "Pt196"},{78, 198, 0.07163, "Pt198"},} }, 
 { 79, {{79, 197, 1.0, "Au197"},} }, 
 { 80, {{80, 196, 0.0015, "Hg196"},{80, 198, 0.09970000000000001, "Hg198"},{80, 199, 0.16870000000000002, "Hg199"},{80, 200, 0.231, "Hg200"},{80, 201, 0.1318, "Hg201"},{80, 202, 0.2986, "Hg202"},{80, 204, 0.0687, "Hg204"},} }, 
 { 81, {{81, 203, 0.29524, "Tl203"},{81, 205, 0.70476, "Tl205"},} }, 
 { 82, {{82, 204, 0.013999999999999999, "Pb204"},{82, 206, 0.24100000000000002, "Pb206"},{82, 207, 0.22100000000000003, "Pb207"},{82, 208, 0.524, "Pb208"},} }, 
 { 83, {{83, 209, 1.0, "Bi209"},} }, 
 { 90, {{90, 232, 1.0, "Th232"},} }, 
 { 91, {{91, 231, 1.0, "Pa231"},} }, 
 { 92, {{92, 234, 5.4999999999999995e-05, "U234"},{92, 235, 0.0072, "U235"},{92, 238, 0.9927450000000001, "U238"},} }, 
})
{  

}

Prompt::MaterialDecomposer::~MaterialDecomposer()
{

}


std::vector<Prompt::IsotopeComposition> Prompt::MaterialDecomposer::decompose(const std::string & str)
{

  //   struct IsotopeComposition {
  //   int Z;
  //   int A;
  //   double frac;
  //   std::string name;
  // };

  std::vector<IsotopeComposition> isocomp;

  // name 
  NCrystal::MatCfg matcfg(str);

  auto info = NCrystal::createInfo(matcfg);
  const NCrystal::Info::Composition & comp = info->getComposition();

  for(const NCrystal::Info::CompositionEntry &v : comp)
  {
    double frac = v.fraction;
    const auto& atomdata = v.atom.data();
    // std::cout << atomdata.elementName() << ": A " << atomdata.A() << ", Z " << atomdata.Z() << ", fraction " << frac << std::endl;

    if(atomdata.isComposite())
    {
      std::cout << atomdata.elementName() << " is composite\n";
      for (unsigned i=0;i<atomdata.nComponents();i++)
      {
        auto &com = atomdata.getComponent(i);
        std::cout << atomdata.elementName()+std::to_string(com.data->A())
        << ", fraction: " << com.fraction;
        std::cout << ". A: " <<  com.data->A();
        std::cout << ", Z: " <<  com.data->Z() << std::endl;
        isocomp.emplace_back(IsotopeComposition{ com.data->Z(), com.data->A(), com.fraction*v.fraction, atomdata.elementName()+std::to_string(com.data->A())  });
      }      
    }
    else if(atomdata.isNaturalElement())
    {
      std::cout  << atomdata.elementName() << " is natural. Z=" << atomdata.Z() << "\n";
      auto natcomp = getComposition(atomdata.Z());
      for(auto &v:natcomp)
        v.frac *= frac;
      isocomp.insert(isocomp.end(), natcomp.begin(), natcomp.end());
    }
    else if(atomdata.isSingleIsotope())
    {
      std::cout << atomdata.elementName()+std::to_string(atomdata.A()) << " is single isotope. Z=" << atomdata.Z() << ". A=" << atomdata.A() << "\n";
      isocomp.emplace_back(IsotopeComposition{ atomdata.Z(), atomdata.A(), v.fraction, atomdata.elementName()+std::to_string(atomdata.A())  });
    }
    std::cout << std::endl;
  }
  return isocomp;
}


std::vector<Prompt::IsotopeComposition> Prompt::MaterialDecomposer::getComposition(int Z)
{
  if (auto search = m_natcomp.find(Z); search != m_natcomp.end())
    return search->second;
  else
  {
    PROMPT_THROW2(CalcError, "NaturalMaterial not found for Z=" << Z);
    return search->second;
  }
    
}