////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  This file is part of Prompt (see https://gitlab.com/xxcai1/Prompt)        //
//                                                                            //
//  Copyright 2021-2022 Prompt developers                                     //
//                                                                            //
//  Licensed under the Apache License, Version 2.0 (the "License");           //
//  you may not use this file except in compliance with the License.          //
//  You may obtain a copy of the License at                                   //
//                                                                            //
//      http://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                            //
//  Unless required by applicable law or agreed to in writing, software       //
//  distributed under the License is distributed on an "AS IS" BASIS,         //
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//  See the License for the specific language governing permissions and       //
//  limitations under the License.                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

inline constexpr double Prompt::ptclamp(double val, double low, double up)
{
  pt_assert(up>=low);
  //NB: C++17 has std::clamp, not sure if it is more efficient. The version here
  //was checked to produce just two instructions (do NOT change argument order
  //here, or it will generate more instructions).
  return std::min(std::max(val,low),up);
}

inline constexpr bool Prompt::floateq(double a, double b, double rtol, double atol)
{
  return std::abs(a-b) <= 0.5 * rtol * (std::abs(a) + std::abs(b)) + atol;
}

inline constexpr double Prompt::neutronEKin2k(double ekin)
{
  assert(ekin>=0.);
  return std::sqrt(ekin*Unit::eV*const_eV2kk);
}

inline constexpr double Prompt::neutronAngleCosine2Q(double angle_cos, double enin_eV, double enout_eV)
{
  double ratio = enout_eV/enin_eV;
  double k0=neutronEKin2k(enin_eV);
  double scale = sqrt(1.+ ratio - 2*angle_cos *sqrt(ratio) );
  return k0*scale;
}

inline constexpr double Prompt::wl2ekin( double wl)
{
  //angstrom to eV
  return wlsq2ekin( wl * wl );
}

inline constexpr double Prompt::ekin2wl( double ekin)
{
  //eV to angstrom
  return ekin ? std::sqrt( 0.081804209605330899 / ekin ) : std::numeric_limits<double>::max();
}

inline constexpr double Prompt::wlsq2ekin( double wlsq )
{
  //angstrom^2 to eV
  return (wlsq ? ( 0.081804209605330899 / wlsq )  : std::numeric_limits<double>::max());
}

inline constexpr double Prompt::ekin2wlsq( double ekin)
{
  //eV to angstrom^2
  return ekin ? 0.081804209605330899 / ekin : std::numeric_limits<double>::max();
}

inline constexpr double Prompt::ekin2wlsqinv( double ekin)
{
  //eV to 1/angstrom^2
  return ekin * 12.22430978582345950656;//constant is 1/0.081804209605330899
}


inline Prompt::StableSum::StableSum()
  : m_sum(0.0), m_correction(0.0)
{
}

inline Prompt::StableSum::~StableSum()
{
}

inline void Prompt::StableSum::add( double x )
{
  double t = m_sum + x;
  m_correction += std::abs(m_sum)>=std::abs(x)  ? (m_sum-t)+x : (x-t)+m_sum;
  m_sum = t;
}

inline double Prompt::StableSum::sum() const
{
  return m_sum + m_correction;
}
